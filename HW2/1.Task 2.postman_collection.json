{
	"info": {
		"_postman_id": "e5d42620-b48a-48a7-a101-f0431ac3e0fd",
		"name": "Task 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20829113"
	},
	"item": [
		{
			"name": "First resp",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*http://162.55.220.72:5005/first\r",
							"1. Отправить запрос.\r",
							"2. Статус код 200\r",
							"3. Проверить, что в body приходит правильный string.\r",
							"*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"http://162.55.220.72:5005/object_info_3\r",
							"1. Отправить запрос.\r",
							"2. Статус код 200\r",
							"3. Спарсить response body в json.\r",
							"4. Спарсить request.\r",
							"5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"8. Вывести в консоль параметр family из response.\r",
							"9. Проверить, что у параметра dog есть параметры name.\r",
							"10. Проверить, что у параметра dog есть параметры age.\r",
							"11. Проверить, что параметр name имеет значение Luky.\r",
							"12. Проверить, что параметр age имеет значение 4.\r",
							"*/\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let res = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(res.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(res.age).to.eql(req.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(JSON.stringify(res.salary)).to.eql(req.salary);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(res.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has a name\", function () {\r",
							"    pm.expect(JSON.stringify(res.family.pets.dog)).to.include('name');\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name is Luky\", function () {\r",
							"    pm.expect(res.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has an age\", function () {\r",
							"    pm.expect(JSON.stringify(res.family.pets.dog)).to.include('age');\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog's age is 4\", function () {\r",
							"    pm.expect(res.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"http://162.55.220.72:5005/object_info_4\r",
							"1. Отправить запрос.\r",
							"2. Статус код 200\r",
							"3. Спарсить response body в json.\r",
							"4. Спарсить request.\r",
							"5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"7. Вывести в консоль параметр salary из request.\r",
							"8. Вывести в консоль параметр salary из response.\r",
							"9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"15. Создать в окружении переменную name\r",
							"16. Создать в окружении переменную age\r",
							"17. Создать в окружении переменную salary\r",
							"18. Передать в окружение переменную name\r",
							"19. Передать в окружение переменную age\r",
							"20. Передать в окружение переменную salary\r",
							"21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"*/\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//парсинг запроса метод GET\r",
							"let req = pm.request.url.query.toObject();\r",
							"console.log(req)\r",
							"//4. Спарсить request.\r",
							"let res = pm.response.json();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(res.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(JSON.stringify(res.age)).to.eql(req.age);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"pm.test(\"Check salary\", function () {\r",
							"    //Вывод в консоль параметра salary из request\r",
							"    //Вывод в консоль парамера salary из response\r",
							"    console.log(req.salary)\r",
							"    console.log(res.salary)\r",
							"    //вывод в консоль элементов массива из req.salary\r",
							"    console.log(res.salary[0])\r",
							"    console.log(res.salary[1])\r",
							"    console.log(res.salary[02])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"    pm.expect(JSON.stringify(res.salary[0])).to.eql(req.salary);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary*2\", function () {\r",
							"    pm.expect(res.salary[1]).to.eql(JSON.stringify(req.salary*2));\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary*3\", function () {\r",
							"    pm.expect(res.salary[2]).to.eql(JSON.stringify(req.salary*3));\r",
							"});\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"pm.test(\"function\", function (){\r",
							"    let arr = pm.response.json().salary\r",
							"    //arr.forEach(arr=>\r",
							"    //console.log(arr))\r",
							"    for(i=0;i<arr.length;i++){\r",
							"        console.log(arr[i])\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&salary={{salary}}&age={{age}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*http://162.55.220.72:5005/user_info_2\r",
							"1. Вставить параметр salary из окружения в request\r",
							"2. Вставить параметр age из окружения в age\r",
							"3. Вставить параметр name из окружения в name\r",
							"4. Отправить запрос.\r",
							"5. Статус код 200\r",
							"6. Спарсить response body в json.\r",
							"7. Спарсить request.\r",
							"8. Проверить, что json response имеет параметр start_qa_salary\r",
							"9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"13. Проверить, что json response имеет параметр person\r",
							"14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.*/\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//парсинг запроса метод POST\r",
							"let req = request.data;\r",
							"\r",
							" //парсинг ответа\r",
							"let res = pm.response.json();\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(JSON.stringify(res)).to.include('start_qa_salary' );\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(JSON.stringify(res)).to.include('qa_salary_after_6_months' );\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(JSON.stringify(res)).to.include('qa_salary_after_12_months' );\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(res)).to.include('qa_salary_after_1.5_year' );\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(JSON.stringify(res)).to.include('qa_salary_after_3.5_years' );\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"par person\", function () {\r",
							"    pm.expect(JSON.stringify(res)).to.include('person');\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary=salary\", function () {\r",
							"    pm.expect(JSON.stringify(res.start_qa_salary)).to.eql(req.salary);\r",
							"})\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months=salary*2\", function () {\r",
							"    pm.expect (res.qa_salary_after_6_months).to.eql(req.salary*2)\r",
							"})\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months*2.7\", function () {\r",
							"    pm.expect(res.qa_salary_after_12_months).to.eql(req.salary*2.7)\r",
							"})\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)???\r",
							"pm.test(\"qa_salary_after_1.5_year=salary*3.3\", function () {\r",
							"    pm.expect (res['qa_salary_after_1.5_year']).to.eql(req.salary*3.3)\r",
							"})\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function () {\r",
							"    pm.expect (res['qa_salary_after_3.5_years']).to.eql(req.salary*3.8)\r",
							"})\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"first_el_u_name = salary \", function () {\r",
							"    pm.expect (JSON.stringify(res.person.u_name[1])).to.eql(req.salary)\r",
							"})\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age = age\", function () {\r",
							"    pm.expect (JSON.stringify(res.person.u_age)).to.eql(req.age)\r",
							"})\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2\", function () {\r",
							"    pm.expect (res.person.u_salary_5_years).to.eql(req.salary*4.2)\r",
							"})\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.*/\r",
							"\r",
							"let object = res.person\r",
							"//генерация массива из ключей\r",
							"let key =(Object.keys(object))\r",
							"//ключи по очереди подставляются в цикл в значение key\r",
							"for (key in object) {\r",
							"    console.log(key + ': ' + object[key])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}//user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"http://162.55.220.72:5005/user_info_3\r",
							"1. Отправить запрос.\r",
							"2. Статус код 200\r",
							"3. Спарсить response body в json.\r",
							"4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"7. Спарсить request.\r",
							"8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"11. Вывести в консоль параметр family из response.\r",
							"12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//парсим респонс\r",
							" let res = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Chek name\", function () {\r",
							"    pm.expect(res.name).to.eql('Artyom');\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Chek age\", function () {\r",
							"    pm.expect(res.age).to.eql('27');\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Chek salary\", function () {\r",
							"    pm.expect(res.salary).to.eql(1000000);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Chek name\", function () {\r",
							"    pm.expect(res.name).to.eql(req.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Chek age\", function () {\r",
							"    pm.expect(res.age).to.eql(req.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Chek salary\", function () {\r",
							"    pm.expect(JSON.stringify(res.salary)).to.eql(req.salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(res.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Chek salary function\", function () {\r",
							"    pm.expect(res.family.u_salary_1_5_year).to.eql(res.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}//user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"user_info_3"
					]
				}
			},
			"response": []
		}
	]
}
